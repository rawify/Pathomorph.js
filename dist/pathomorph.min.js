/*
Pathomorph v0.0.1 7/11/2025
https://github.com/rawify/Pathomorph.js

Copyright (c) 2025, Robert Eisele (https://raw.org/)
Licensed under the MIT license.
*/
'use strict';(function(t){const l=2*Math.PI,h={Line:({x:a,y:b},{x:c,y:d})=>`M${a} ${b}L${c} ${d}`,Rectangle:({x:a,y:b},{x:c,y:d})=>`M${a} ${b}L${a} ${d}L${c} ${d}L${c} ${b}z`,Circle:(a,b)=>h.Ellipse(a,b,b),Ellipse:({x:a,y:b},c,d,e=0)=>{const f=a-c;return`M ${f} ${b}`+`A ${c} ${d} ${e} 0 1 ${a+c} ${b}`+`A ${c} ${d} ${e} 0 1 ${f} ${b}`},Arc:({x:a,y:b},c,d=0,e=l)=>{const f={x:a+c*Math.cos(d),y:b+c*Math.sin(d)},g={x:a+c*Math.cos(e),y:b+c*Math.sin(e)};d=(e-d)%l;0>d&&(d+=l);return 1E-6>Math.abs(d)||1E-6>
Math.abs(d-l)?`M ${f.x} ${f.y} A ${c} ${c} 0 1 1 ${a-c} ${b} A ${c} ${c} 0 1 1 ${f.x} ${f.y}z`:`M ${f.x} ${f.y} A ${c} ${c} 0 ${d>Math.PI?1:0} 1 ${g.x} ${g.y}`},Polyline:a=>{if(2>a.length)return"";let b="M";for(let c=0;c<a.length;c++)0<c&&(b+="L"),b+=a[c].x,b+=" ",b+=a[c].y;return b},Polygon:a=>h.Polyline(a)+"z",RoundedRect:({x:a,y:b},{x:c,y:d},e=0,f=0)=>`M${a} ${d-f}`+`A ${e} ${f} 0 0 0 ${a+e} ${d}`+`L${c-e} ${d}`+`A ${e} ${f} 0 0 0 ${c} ${d-f}`+`L${c} ${b+f}`+`A ${e} ${f} 0 0 0 ${c-e} ${b}`+`L${a+
e} ${b}`+`A ${e} ${f} 0 0 0 ${a} ${b+f}z`,LineOffset:(a,b,c=0,d=0)=>{var e=Vector2.fromPoints(a,b);const f=e.length();if(c+d>=f||0===f)return"";e=e.scale(1/f);return h.Line({x:a.x+e.x*c,y:a.y+e.y*c},{x:b.x-e.x*d,y:b.y-e.y*d})},CurvedHorizontalLine:({x:a,y:b},{x:c,y:d})=>{const e=a+(c-a)/2;return`M${a} ${b} C${e} ${b} ${e} ${d} ${c} ${d}`},CurvedVerticalLine:({x:a,y:b},{x:c,y:d})=>{const e=b+(d-b)/2;return`M${a} ${b} C${a} ${e} ${c} ${e} ${c} ${d}`},CurvedLine:(a,b,c=.5)=>{let d=Vector2.fromPoints(a,
b);const e=d.length();if(!e)return"";d=d.scale(1/e);const f=d.perp();c*=e;return`M${a.x} ${a.y}`+`C${a.x+(f.x+d.x)*c} ${a.y+(f.y+d.y)*c}`+`${b.x+(f.x-d.x)*c} ${b.y+(f.y-d.y)*c} ${b.x} ${b.y}`},ArrowTip:(a,b)=>{a=Vector2.fromPoints(a,b).normalize().scale(-6);return`M${b.x} ${b.y}L${b.x+.951057*a.x-.309017*a.y} ${b.y+.309017*a.x+.951057*a.y}L${b.x+.75*a.x} ${b.y+.75*a.y}L${b.x+.951057*a.x+.309017*a.y} ${b.y-.309017*a.x+.951057*a.y}Z`},FilletCorner:(a,b,c,d)=>{var e=Vector2.fromPoints(b,a).normalize();
const f=Vector2.fromPoints(b,c).normalize(),g=d*Math.sqrt(2/(1-e.dot(f))-1),k=e.scale(g).add(b);b=f.scale(g).add(b);e=0>e.cross(f)?1:0;return`M${a.x} ${a.y}`+`L${k.x} ${k.y}`+`A${d} ${d} 0 0 ${e} ${b.x} ${b.y}`+`L${c.x} ${c.y}`},PartialPolyline:(a,b)=>{if(2>a.length)return"";const c=[];var d=0;for(var e=1;e<a.length;e++){var f=Math.hypot(a[e].x-a[e-1].x,a[e].y-a[e-1].y);d+=f;c.push(f)}f=b*d;b=`M${a[0].x} ${a[0].y}`;for(let g=1;g<a.length;g++){const k=c[g-1];d=a[g-1];e=a[g];if(k<=f)b+=`L${e.x} ${e.y}`,
f-=k;else{a=f/k;b+=`L${d.x+a*(e.x-d.x)} ${d.y+a*(e.y-d.y)}`;break}}return b},RingSegment:({x:a,y:b},c,d,e=0,f=l)=>{d/=2;const g=c-d;c+=d;const k=Math.sin(e),m=Math.cos(e),n=Math.sin(f),p=Math.cos(f);var q=a+g*m,r=b+g*k;e=(f-e)%l>Math.PI?1:0;return`M${q} ${r}`+`A${g} ${g} 0 ${e} 1 ${a+g*p} ${b+g*n}`+`A${d} ${d} 0 0 1 ${a+c*p} ${b+c*n}`+`A${c} ${c} 0 ${e} 0 ${a+c*m} ${b+c*k}`+`A${d} ${d} 0 0 1 ${q} ${r}`+"Z"}};"function"===typeof define&&define.amd?define([],function(){return h}):"object"===typeof exports?
(Object.defineProperty(h,"__esModule",{value:!0}),h["default"]=h,h.Pathomorph=h,module.exports=h):t.Pathomorph=h})(this);
